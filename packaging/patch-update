#!/usr/bin/perl
# This script is used to turn one or more of the "patch/BASE/*" branches
# into one or more diffs in the "patches" directory.  Pass the option
# --gen if you want generated files in the diffs.  Pass the name of
# one or more diffs if you want to just update a subset of all the
# diffs.

use strict;
use warnings;
use Getopt::Long;

my $patches_dir = 'patches';
my $tmp_dir = "patches.$$";
my $make_gen_cmd = 'make -f prepare-source.mak conf && ./config.status && make gen';

&Getopt::Long::Configure('bundling');
&usage if !&GetOptions(
    'branch|b=s' => \( my $master_branch = 'master' ),
    'skip-check' => \( my $skip_branch_check ),
    'shell|s' => \( my $launch_shell ),
    'gen:s' => \( my $incl_generated_files ),
    'help|h' => \( my $help_opt ),
);
&usage if $help_opt;

$ENV{GIT_MERGE_AUTOEDIT} = 'no';

if (defined $incl_generated_files) {
    $patches_dir = $incl_generated_files if $incl_generated_files ne '';
    $incl_generated_files = 1;
}

die "No '$patches_dir' directory was found.\n" unless -d $patches_dir;
die "No '.git' directory present in the current dir.\n" unless -d '.git';

require 'packaging/git-status.pl';
my $starting_branch = check_git_state($master_branch, !$skip_branch_check, 1);

my $master_commit;
open PIPE, '-|', "git log -1 --no-color $master_branch" or die $!;
while (<PIPE>) {
    if (/^commit (\S+)/) {
	$master_commit = $1;
	last;
    }
}
close PIPE;
die "Unable to determine commit hash for master branch: $master_branch\n" unless defined $master_commit;

if ($incl_generated_files) {
    my @extra_files = get_extra_files();
    die "'$tmp_dir' must not exist in the current directory.\n" if -e $tmp_dir;
    mkdir($tmp_dir, 0700) or die "Unable to mkdir($tmp_dir): $!\n";
    system "$make_gen_cmd && rsync -a @extra_files $tmp_dir/master/" and exit 1;
}
our $last_touch = time;

my %patches;

# Start by finding all patches so that we can load all possible parents.
open(PIPE, '-|', 'git', 'branch', '-l') or die $!;
while (<PIPE>) {
    if (m# patch/\Q$master_branch\E/(.*)#o) {
	$patches{$1} = 1;
    }
}
close PIPE;

my @patches = sort keys %patches;

my(%parent, %description);
foreach my $patch (@patches) {
    my $branch = "patch/$master_branch/$patch";
    my $desc = '';
    open(PIPE, '-|', 'git', 'diff', '-U1000', "$master_branch...$branch", '--', "PATCH.$patch") or die $!;
    while (<PIPE>) {
	last if /^@@ /;
    }
    while (<PIPE>) {
	next unless s/^[ +]//;
	if (m#patch -p1 <patches/(\S+)\.diff# && $1 ne $patch) {
	    my $parent = $parent{$patch} = $1;
	    if (!$patches{$parent}) {
		die "Parent of $patch is not a local branch: $parent\n";
	    }
	}
	$desc .= $_;
    }
    close PIPE;
    $description{$patch} = $desc;
}

if (@ARGV) {
    # Limit the list of patches to actually process based on @ARGV.
    @patches = ( );
    foreach (@ARGV) {
	s{^patch(es)?/} {};
	s{\.diff$} {};
	if (!$patches{$_}) {
	    die "Local branch not available for patch: $_\n";
	}
	push(@patches, $_);
    }
}

my %completed;
foreach my $patch (@patches) {
    next if $completed{$patch}++;
    last unless update_patch($patch);
}

if ($incl_generated_files) {
    system "rm -rf $tmp_dir";
}

sleep 1 while $last_touch >= time;
system "git checkout $starting_branch" and exit 1;

exit;


sub update_patch
{
    my($patch) = @_;

    my $parent = $parent{$patch};
    my $based_on;
    if (defined $parent) {
	unless ($completed{$parent}++) {
	    update_patch($parent);
	}
	$based_on = $parent = "patch/$master_branch/$parent";
    } else {
	$parent = $master_branch;
	$based_on = $master_commit;
    }

    print "======== $patch ========\n";

    sleep 1 while $incl_generated_files && $last_touch >= time;
    system "git checkout patch/$master_branch/$patch" and return 0;

    my $ok = system("git merge $based_on") == 0;
    if (!$ok || $launch_shell) {
	my($parent_dir) = $parent =~ m{([^/]+)$};
	print qq|"git merge $based_on" incomplete -- please fix.\n| if !$ok;
	$ENV{PS1} = "[$parent_dir] $patch: ";
	while (1) {
	    if (system($ENV{SHELL}) != 0) {
		print "Abort? [n/y] ";
		$_ = <STDIN>;
		next unless /^y/i;
		return 0;
	    }
	    my($cur_branch, $is_clean, $status) = check_git_status(0);
	    last if $is_clean;
	    print $status;
	}
    }

    open(OUT, '>', "$patches_dir/$patch.diff") or die $!;
    print OUT $description{$patch}, "\nbased-on: $based_on\n";

    my @extra_files;
    if ($incl_generated_files) {
	@extra_files = get_extra_files();
	system "$make_gen_cmd && rsync -a @extra_files $tmp_dir/$patch/" and exit 1;
    }
    $last_touch = time;

    open(PIPE, '-|', 'git', 'diff', $based_on) or die $!;
    DIFF: while (<PIPE>) {
	while (m{^diff --git a/PATCH}) {
	    while (<PIPE>) {
		last if m{^diff --git a/};
	    }
	    last DIFF if !defined $_;
	}
	next if /^index /;
	print OUT $_;
    }
    close PIPE;

    if ($incl_generated_files) {
	my $parent_dir;
	if ($parent eq $master_branch) {
	    $parent_dir = 'master';
	} else {
	    ($parent_dir) = $parent =~ m{([^/]+)$};
	}
	open(PIPE, '-|', 'diff', '-Nurp', "$tmp_dir/$parent_dir", "$tmp_dir/$patch") or die $!;
	while (<PIPE>) {
	    s#^(diff -Nurp) $tmp_dir/[^/]+/(.*?) $tmp_dir/[^/]+/(.*)#$1 a/$2 b/$3#o;
	    s#^\Q---\E $tmp_dir/[^/]+/([^\t]+)\t.*#--- a/$1#o;
	    s#^\Q+++\E $tmp_dir/[^/]+/([^\t]+)\t.*#+++ b/$1#o;
	    print OUT $_;
	}
	close PIPE;
	unlink @extra_files;
    }

    close OUT;

    1;
}

exit;

sub get_extra_files
{
    my @extras;

    open(IN, '<', 'Makefile.in') or die "Couldn't open Makefile.in: $!\n";
    while (<IN>) {
	if (s/^GENFILES=//) {
	    while (s/\\$//) {
		$_ .= <IN>;
	    }
	    @extras = split(' ', $_);
	    last;
	}
    }
    close IN;

    return @extras;
}

sub usage
{
    die <<EOT;
Usage: patch-update [OPTIONS] [patches/DIFF...]

Options:
-b, --branch=BRANCH  The master branch to merge into the patch/BASE/* branches.
    --gen[=DIR]      Include generated files.  Optional destination DIR
                     arg overrides the default of using the "patches" dir.
    --skip-check     Skip the check that ensures starting with a clean branch.
-s, --shell          Launch a shell for every patch/BASE/* branch updated, not
                     just when a conflict occurs.
-h, --help           Output this help message.
EOT
}
